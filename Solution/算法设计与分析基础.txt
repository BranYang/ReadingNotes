第一章
1.1

1.1.4
Q : 设计一个计算floor(sqrt(n))的算法，n为任意正整数。除了赋值与比较运算，该算法只能用到基本的四则运算操作。
A : 
for i <- 1 to n do:
    p = i * i
    if p < n:
        i += 1
    else if p > n:
        return i - 1
    else:
        return i


1.1.5
Q : 设计一个算法，在一家排序的两个列表中，找出所以相同的元素。例如，列表 [2, 5, 5, 5] 和 [2, 2, 3, 5, 5, 7] 应该输出 [2, 5, 5]。 如果给定的两个列表的长度分别为m 和 n, 你设计的算法的最大比较次数应该是多少？
A :
i <- 0
j <- 0
while (i != m - 1) and (j != n - 1)
    if lst1[i] < lst2[j]:
        i <- min(i+1, m-1)
    elif lst1[i] > lst2[j]:
        j <- min(j+1, n-1)
    elif lst1[i] = lst2[j]:
        result + = lst1[i]
        i <- min(i+1, m-1)
        j <- min(j+1, n-1)
return result

1.1.6:
A :
a. : gcd(314315, 14142) = 1

b. : 14142倍

1.1.7:
设 g 为 gcd(m, n). m = g * i, n = g * j, 且i , j 互质.
则 m%n = g * k, 其中 k 与 j 互质.
故 gcd(n, m%n) = g.

1.1.8：
最多发生一次. 因为之后每次循环m<-n， n<-m%n. 而m%n < n.

1.1.9:
a:
最少除一次，如gcd(1,1) = gcd(1,0)=1
b:
最多除5次.gcd(5,8)=gcd(8,5)=gcd（5，3)=gcd(3,2)=gcd(2,1)=gcd(1,0)=1
def gcd(m, n):
    counter = 0
    while n != 0:
        r = m%n
        m = n
        n = r
        counter += 1
    return m, counter
	
result = []	
for i in range(1, 11):
    for j in range(1, 11):
        m, c = gcd(i,j)
        result.append(c)
        print("i: %d\tj: %d\tm: %d\tcounter: %d\n"%(i, j, m, c))
print(max(result))


1.1.10:
a.
EclidOrigGCD(m, n):
while n != 0:
    r <- m
    while r >= n:
        r = r - n
    m <- n
    n <- r
return m

b:
5， 6 -> 1 -> 4 -> 2 -> 3 -> end
4, 6 -> 2 -> end
8, 10 -> 2 -> 6 -> 4 -> end
可以写出的数字个数是
(min(m,n))/gcd(m,n) - 1

1.1.11:
a:
def extendedEuclid(m, n):
    lst_m = [1, 0]
    lst_n = [0, 1]
    while n != 0:
        q, r = divmod(m, n)
        m = n
        n = r
        lst_m.append(lst_m[-2] - (q * lst_m[-1]))
        lst_n.append(lst_n[-2] - (q * lst_n[-1]))
    return m, lst_m[-2], lst_n[-2]

b:
设d为a, b的最大公约数。
若c%d != 0, 方程无整数解。
若c = d * k, 则求出方程 ap + bq = d的解，x = p*k, y=q*k

1.1.12
对第k号门。对k分解质因式， 设结果为
a1^p1*a2^p2...
则最终门的状态取决于
(p1+1)*(p2+2)的奇偶性。


1.2
1.2.1
Peasant Wolf Goat Cabbage |..River..|
Wolf Cabbage |..River..| Peasant Goat
Peasant Wolf Cabbage |..River..| Goat
Cabbage |..River..| Peasant Wolf Goat
Peasant Goat Cabbage |..River..| Wolf
Goat |..River..| Peasant Cabbage Wolf
Peasant Goat |..River..| Cabbage Wolf
|..River..| Peasant Goat Cabbage Wolf

1.2.2
P1 P2 P3 P4 |..Bridge..|
P3 P4 |..Bridge..| P1 P2    .... 2 min
P1 P3 P4 |..Bridge..| P2    .... 1 min
P1 |..Bridge..| P2 P3 P4    .... 10 min
P1 P2 |..Bridge..| P3 P4    .... 2 min
|..Bridge..| P1 P2 P3 P4    .... 2 min

1.2.3

